// bootstrap
@256
D=A
@SP
M=D
@Sys.init_return
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@5
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.init
D;JMP
(Sys.init_return)
// function Main.fibonacci 0
(Main.fibonacci)
// push argument 0
@ARG
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 2
@2
D=A
@SP
A=M
M=D
@SP
AM=M+1
// arithmetic lt
@Main.arith_func_0
D=A
@R13
M=D
@SP
AM=M-1
D=M
A=A-1
MD=M-D
@SET_BOOL_TRUE
D;JLT
@SET_BOOL_FALSE
D;JMP
(Main.arith_func_0)
// if-goto IF_TRUE
@SP
AM=M-1
D=M
@Main.IF_TRUE
D;JLT
// goto IF_FALSE
@Main.IF_FALSE
D;JMP
// label IF_TRUE
(Main.IF_TRUE)
// push argument 0
@ARG
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// return
@LCL
D=M
@R5
M=D
@5
D=A
@LCL
A=M-D
D=M
@R6
M=D
@ARG
D=M
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R5
A=M-1
D=M
@THAT
M=D
@2
D=A
@R5
A=M-D
D=M
@THIS
M=D
@3
D=A
@R5
A=M-D
D=M
@ARG
M=D
@4
D=A
@R5
A=M-D
D=M
@LCL
M=D
@R6
A=M
D;JMP
// label IF_FALSE
(Main.IF_FALSE)
// push argument 0
@ARG
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 2
@2
D=A
@SP
A=M
M=D
@SP
AM=M+1
// arithmetic sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// call Main.fibonacci 1
@Main.vm.Main.fibonacci_return_0
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Main.fibonacci
D;JMP
(Main.vm.Main.fibonacci_return_0)
// push argument 0
@ARG
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 1
@1
D=A
@SP
A=M
M=D
@SP
AM=M+1
// arithmetic sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// call Main.fibonacci 1
@Main.vm.Main.fibonacci_return_1
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Main.fibonacci
D;JMP
(Main.vm.Main.fibonacci_return_1)
// arithmetic add
@SP
AM=M-1
D=M
A=A-1
M=D+M
// return
@LCL
D=M
@R5
M=D
@5
D=A
@LCL
A=M-D
D=M
@R6
M=D
@ARG
D=M
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
@ARG
D=M+1
@SP
M=D
@R5
A=M-1
D=M
@THAT
M=D
@2
D=A
@R5
A=M-D
D=M
@THIS
M=D
@3
D=A
@R5
A=M-D
D=M
@ARG
M=D
@4
D=A
@R5
A=M-D
D=M
@LCL
M=D
@R6
A=M
D;JMP
// function Sys.init 0
(Sys.init)
// push constant 4
@4
D=A
@SP
A=M
M=D
@SP
AM=M+1
// call Main.fibonacci 1
@Sys.vm.Main.fibonacci_return_0
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Main.fibonacci
D;JMP
(Sys.vm.Main.fibonacci_return_0)
// label WHILE
(Sys.WHILE)
// goto WHILE
@Sys.WHILE
D;JMP
// Jump to the end so that the helpers can only be run by reference
@END
D;JMP
(SET_BOOL_TRUE)
@SP
A=M-1
M=-1
@R13
A=M
D;JMP
(SET_BOOL_FALSE)
@SP
A=M-1
M=0
@R13
A=M
D;JMP
(END)
