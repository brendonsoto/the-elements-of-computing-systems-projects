// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:

    /* instruction[16] = i xx a cccccc ddd jjj
     * i (0 = A-instruction | 1 = C-instruction)
     * xx = N/A
     * a (0 = operate on A-memory | 1 = operate on M-memory)
     * cccccc = ALU control bits
     * ddd = Various combinations of registers to output to (A,D,M)
     * jjj = Jump instructions
     */

     /* INSTRUCTION INPUT */
     Mux16(a=instruction, b=outALU, sel=instruction[15], out=outInstruction);

     /* A Register */
     Not(in=instruction[15], out=isNotMSB);
     Or(a=isNotMSB, b=instruction[5], out=isLoadA);
     ARegister(in=outInstruction, load=isLoadA, out=outA, out[0..14]=addressM);

     /* D Register */
     And(a=instruction[15], b=instruction[4], out=isLoadD);
     DRegister(in=outALU, load=isLoadD, out=outD);

     /* M Register */
     And(a=instruction[15], b=instruction[3], out=writeM);

     /* Mux deciding between A or M to feed to ALU */
     Mux16(a=outA, b=inM, sel=instruction[12], out=outAM);

     ALU(
       x=outD,
       y=outAM,
       zx=instruction[11],
       nx=instruction[10],
       zy=instruction[9],
       ny=instruction[8],
       f=instruction[7],
       no=instruction[6],
       out=outALU,
       out=outM,
       zr=zr,
       ng=ng
     );

     /* The Jump control bits.
      * We can see whether a jump is needed or not by ensuring all J-bits are 0.
     */

     DMux8Way(
       in=true,
       sel=instruction[0..2],
       a=noJump,
       b=JGT,
       c=JEQ,
       d=JGE,
       e=JLT,
       f=JNE,
       g=JLE,
       h=JMP
     );

     Not(in=zr, out=notZr);
     Not(in=ng, out=notNg);

     // Not neg or zero
     And(a=notZr, b=notNg, out=notZrOrNg);

     // Neg or Zero
     Or(a=zr, b=ng, out=zrOrNg);

     // Jump if out > 0
     And(a=JGT, b=notZrOrNg, out=isJGT);

     // Jump if out = 0
     And(a=JEQ, b=zr, out=isJEQ);

     // Jump if out >= 0
     And(a=JGE, b=notNg, out=isJGE);

     // Jump if out < 0
     And(a=JLT, b=ng, out=isJLT);

     // Jump if out != 0
     And(a=JNE, b=notZr, out=isJNE);

     // Jump if out <= 0
     And(a=JLE, b=zrOrNg, out=isJLE);

     Or8Way(
       in[0] = false,
       in[1] = isJGT,
       in[2] = isJEQ,
       in[3] = isJGE,
       in[4] = isJLT,
       in[5] = isJNE,
       in[6] = isJLE,
       in[7] = JMP,
       out=isJumpBitsValid
     );

     And(a=isJumpBitsValid, b=instruction[15], out=isJump);

     Not(in=isJump, out=isNotJump);

     PC(
       in=outA,
       load=isJump,
       inc=isNotJump,
       reset=reset,
       out[0..14]=pc
     );
 }
